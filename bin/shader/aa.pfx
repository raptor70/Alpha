layout (location = 0) out vec4 outColor;

layout(binding = 10) uniform sampler2D u_sDepth;
layout(binding = 11) uniform sampler2D u_sMainFrame;


#define FXAA_EDGE_THRESHOLD      (1.0/8.0)
#define FXAA_EDGE_THRESHOLD_MIN  (1.0/24.0)
#define FXAA_SEARCH_STEPS        16
#define FXAA_SEARCH_ACCELERATION 1
#define FXAA_SEARCH_THRESHOLD    (1.0/4.0)
#define FXAA_SUBPIX              1
#define FXAA_SUBPIX_FASTER       0
#define FXAA_SUBPIX_CAP          (3.0/4.0)
#define FXAA_SUBPIX_TRIM         (1.0/4.0)
#define FXAA_SUBPIX_TRIM_SCALE (1.0/(1.0 - FXAA_SUBPIX_TRIM))
const float blurScale = 2.0;
const float dofDistance = 3.0;
vec2 pixeldelta = vec2(1.0/u_vResolution.x,1.0/u_vResolution.y);

//-------------------------------------------------
// FXAA (http://developer.download.nvidia.com/assets/gamedev/files/sdk/11/FXAA_WhitePaper.pdf)
//-------------------------------------------------

float Luminance(vec3 rgb) 
{
	return rgb.y * (0.587/0.299) + rgb.x; 
}

vec3 Lerp3(vec3 a, vec3 b, float amountOfA) 
{
    return (vec3(-amountOfA) * b) + ((a * vec3(amountOfA)) + b); 
} 

vec3 FXAA(sampler2D _tex, vec2 _uv)
{
//-------------------------------------------------
// EARLY EXIT IF LOCAL CONTRAST BELOW EDGE DETECT LIMIT
//-------------------------------------------------
	vec3 rgbN = texture(_tex, _uv + vec2( 0,-pixeldelta.y)).xyz;
	vec3 rgbW = texture(_tex, _uv + vec2(-pixeldelta.x, 0)).xyz;
	vec3 rgbM = texture(_tex, _uv).xyz;
	vec3 rgbE = texture(_tex, _uv + vec2( pixeldelta.x, 0)).xyz;
	vec3 rgbS = texture(_tex, _uv + vec2( 0, pixeldelta.y)).xyz;
	float lumaN = Luminance(rgbN);
	float lumaW = Luminance(rgbW);
	float lumaM = Luminance(rgbM);
	float lumaE = Luminance(rgbE);
	float lumaS = Luminance(rgbS);
	float rangeMin = min(lumaM, min(min(lumaN, lumaW), min(lumaS, lumaE)));
	float rangeMax = max(lumaM, max(max(lumaN, lumaW), max(lumaS, lumaE)));
	float range = rangeMax - rangeMin;
	if(range < max(FXAA_EDGE_THRESHOLD_MIN, rangeMax * FXAA_EDGE_THRESHOLD)) 
	{
		return rgbM;
	}
	
//-------------------------------------------------
// COMPUTE LOWPASS
//-------------------------------------------------
	vec3 rgbL = rgbN + rgbW + rgbM + rgbE + rgbS;
	float lumaL = (lumaN + lumaW + lumaE + lumaS) * 0.25;
	float rangeL = abs(lumaL - lumaM);
	float blendL = max(0.0,(rangeL / range) - FXAA_SUBPIX_TRIM) * FXAA_SUBPIX_TRIM_SCALE;
	blendL = min(FXAA_SUBPIX_CAP, blendL);
	
//-------------------------------------------------
// CHOOSE VERTICAL OR HORIZONTAL SEARCH
//-------------------------------------------------
	vec3 rgbNW = texture(_tex, _uv + vec2(-pixeldelta.x,-pixeldelta.y)).xyz;
	vec3 rgbNE = texture(_tex, _uv + vec2( pixeldelta.x,-pixeldelta.y)).xyz;
	vec3 rgbSW = texture(_tex, _uv + vec2(-pixeldelta.x, pixeldelta.y)).xyz;
	vec3 rgbSE = texture(_tex, _uv + vec2( pixeldelta.x, pixeldelta.y)).xyz;
	rgbL += (rgbNW + rgbNE + rgbSW + rgbSE);
	rgbL *= vec3(1.0/9.0);
	float lumaNW = Luminance(rgbNW);
	float lumaNE = Luminance(rgbNE);
	float lumaSW = Luminance(rgbSW);
	float lumaSE = Luminance(rgbSE);
	float edgeVert =
	 abs((0.25 * lumaNW) + (-0.5 * lumaN) + (0.25 * lumaNE)) +
	 abs((0.50 * lumaW ) + (-1.0 * lumaM) + (0.50 * lumaE )) +
	 abs((0.25 * lumaSW) + (-0.5 * lumaS) + (0.25 * lumaSE));
	float edgeHorz =
	 abs((0.25 * lumaNW) + (-0.5 * lumaW) + (0.25 * lumaSW)) +
	 abs((0.50 * lumaN ) + (-1.0 * lumaM) + (0.50 * lumaS )) +
	 abs((0.25 * lumaNE) + (-0.5 * lumaE) + (0.25 * lumaSE));
	bool horzSpan = (edgeHorz >= edgeVert);
	float lengthSign = horzSpan ? -pixeldelta.y : -pixeldelta.x;
    if(!horzSpan) lumaN = lumaW;
    if(!horzSpan) lumaS = lumaE;
    float gradientN = abs(lumaN - lumaM);
    float gradientS = abs(lumaS - lumaM);
    lumaN = (lumaN + lumaM) * 0.5;
    lumaS = (lumaS + lumaM) * 0.5;

//-------------------------------------------------
// CHOOSE SIDE OF PIXEL WHERE GRADIENT IS HIGHEST
//-------------------------------------------------
	bool pairN = gradientN >= gradientS;
	if(!pairN) lumaN = lumaS;
    if(!pairN) gradientN = gradientS;
    if(!pairN) lengthSign *= -1.0;
    vec2 posN;
    posN.x = _uv.x + (horzSpan ? 0.0 : lengthSign * 0.5);
    posN.y = _uv.y + (horzSpan ? lengthSign * 0.5 : 0.0);
	
//-------------------------------------------------
// CHOOSE SEARCH LIMITING VALUES
//-------------------------------------------------
	gradientN *= FXAA_SEARCH_THRESHOLD;
	
//-------------------------------------------------
// SEARCH IN BOTH DIRECTIONS UNTIL FIND LUMA PAIR AVERAGE IS OUT OF RANGE
//-------------------------------------------------
	vec2 posP = posN;
    vec2 offNP = horzSpan ? vec2(pixeldelta.x, 0.0) : vec2(0.0, pixeldelta.y); 
    float lumaEndN = lumaN;
    float lumaEndP = lumaN;
    bool doneN = false;
    bool doneP = false;
    posN += offNP * vec2(-1.0, -1.0);
    posP += offNP * vec2( 1.0, 1.0);
    for(int i = 0; i < FXAA_SEARCH_STEPS; i++) 
	{
		if(!doneN) lumaEndN = Luminance(texture(_tex, posN.xy).xyz);
		if(!doneP) lumaEndP = Luminance(texture(_tex, posP.xy).xyz);
        doneN = doneN || (abs(lumaEndN - lumaN) >= gradientN);
        doneP = doneP || (abs(lumaEndP - lumaN) >= gradientN);
        if(doneN && doneP) break;
        if(!doneN) posN -= offNP;
        if(!doneP) posP += offNP; 
	}
	
//-------------------------------------------------
// HANDLE IF CENTER IS ON POSITIVE OR NEGATIVE SIDE 
//-------------------------------------------------
	float dstN = horzSpan ? _uv.x - posN.x : _uv.y - posN.y;
    float dstP = horzSpan ? posP.x - _uv.x : posP.y - _uv.y;
    bool directionN = dstN < dstP;
    lumaEndN = directionN ? lumaEndN : lumaEndP;
	
//-------------------------------------------------
// CHECK IF PIXEL IS IN SECTION OF SPAN WHICH GETS NO FILTERING
//-------------------------------------------------
	if(((lumaM - lumaN) < 0.0) == ((lumaEndN - lumaN) < 0.0)) 
		lengthSign = 0.0;
		
//-------------------------------------------------
// COMPUTE SUB-PIXEL OFFSET AND FILTER SPAN
//-------------------------------------------------
	float spanLength = (dstP + dstN);
    dstN = directionN ? dstN : dstP;
    float subPixelOffset = (0.5 + (dstN * (-1.0/spanLength))) * lengthSign;
    vec3 rgbF = texture(_tex, vec2( 
		_uv.x + (horzSpan ? 0.0 : subPixelOffset),
        _uv.y + (horzSpan ? subPixelOffset : 0.0))).xyz;
    
    return Lerp3(rgbL, rgbF, blendL); 
}

//-------------------------------------------------

vec3 blur(float scale)
{
	vec3 result = vec3(0);
	for (int x = -1; x <= 1; ++x) 
    {
        for (int y = -1; y <= 1; ++y) 
        {
            vec2 offset = vec2(scale*float(x)*blurScale/(1024.0), scale*float(y)*blurScale/(768.0));
			vec2 uv = v.vPixelUV + offset;
			result += texture( u_sMainFrame, uv ).rgb;
        }
    }
	
	return result / 9;
}

//-------------------------------------------------

vec3 dof()
{
	float refZ = GetViewPos(u_sDepth, vec2(0.5,0.5) ).z;
	float curZ = GetViewPos(u_sDepth, v.vPixelUV ).z;
	float ratio = clamp(abs(curZ - refZ)/dofDistance,0,1);
	return blur(ratio);
}

//-------------------------------------------------

float Sobel()
{
	float result = -1.0 * GetViewPos(u_sDepth,  v.vPixelUV + vec2(-pixeldelta.x,-pixeldelta.y)).z;
	result += -2.0 * GetViewPos(u_sDepth,  v.vPixelUV + vec2(-pixeldelta.x,0)).z;
	result += -1.0 * GetViewPos(u_sDepth,  v.vPixelUV + vec2(-pixeldelta.x,pixeldelta.y)).z;
	
	result += 1.0 * GetViewPos(u_sDepth, v.vPixelUV + vec2(pixeldelta.x,-pixeldelta.y)).z;
	result += 2.0 * GetViewPos(u_sDepth, v.vPixelUV + vec2(pixeldelta.x,0)).z;
	result += 1.0 * GetViewPos(u_sDepth, v.vPixelUV + vec2(pixeldelta.x,pixeldelta.y)).z;
	
	result += -1.0 * GetViewPos(u_sDepth, v.vPixelUV + vec2(-pixeldelta.x,-pixeldelta.y)).z;
	result += -2.0 * GetViewPos(u_sDepth, v.vPixelUV + vec2(0,-pixeldelta.y)).z;
	result += -1.0 * GetViewPos(u_sDepth, v.vPixelUV + vec2(pixeldelta.x,-pixeldelta.y)).z;
	
	result += 1.0 * GetViewPos(u_sDepth, v.vPixelUV + vec2(-pixeldelta.x,pixeldelta.y)).z;
	result += 2.0 * GetViewPos(u_sDepth, v.vPixelUV + vec2(0,pixeldelta.y)).z;
	result += 1.0 * GetViewPos(u_sDepth, v.vPixelUV + vec2(pixeldelta.x,pixeldelta.y)).z;
	return clamp(abs(0.5*result),0,1);
}

//-------------------------------------------------

void main() 
{
	//outColor = vec4(dof(),1);
	outColor = vec4(FXAA(u_sMainFrame, v.vPixelUV ),1);
	//outColor = mix(vec4(0,0,0,1),vec4(FXAA(u_sMainFrame, v.vPixelUV ),1),1-Sobel());
	//outColor = vec4(vec3(Sobel()),1);
	
	//vignetage
	vec2 pixelToCenter = vec2(0.5)-v.vPixelUV;
	float dist = length(pixelToCenter);
	float radius = 0.6;
	float smothness = max(0.00001,u_fVignetteSmoothness)*0.5;
	float vignette = smoothstep(u_fVignetteRadius-smothness,u_fVignetteRadius+smothness, dist);
	outColor = mix(outColor,outColor*u_vVignetteColor,vignette);
}