layout(location = 0)out vec4 outBlur;

layout(binding = 10) uniform sampler2D u_sTexture;

vec2 UVDelta = vec2(1.0/(u_vResolution.x/2.0),1.0/(u_vResolution.y/2.0));
const float GaussWeight[5] = float[] (0.227027, 0.1945946, 0.1216216, 0.054054, 0.016216);


void main() 
{
	vec4 result = texture(u_sTexture, v.vPixelUV) * GaussWeight[0]; // current fragment’s contribution
	vec2 delta = u_fBloomSize * UVDelta;

#ifdef HORIZONTAL
	for(int i = 1; i < 5; ++i)
	{
		result += texture(u_sTexture, v.vPixelUV + vec2(delta.x * i,0.0)) * GaussWeight[i];
		result += texture(u_sTexture, v.vPixelUV - vec2(delta.x * i,0.0)) * GaussWeight[i];
	}
#else
	for(int i = 1; i < 5; ++i)
	{
		result += texture(u_sTexture, v.vPixelUV + vec2(0.0,delta.y * i)) * GaussWeight[i];
		result += texture(u_sTexture, v.vPixelUV - vec2(0.0,delta.y * i)) * GaussWeight[i];
	}
#endif
	outBlur = result;
	//outBlur = texture(u_sTexture, v.vPixelUV);
}