layout (location = 0) out vec2 outDeferredNormal;
layout (location = 1) out vec4 outDeferredAlbedoSpec;
layout (location = 2) out vec4 outDeferredEmissiveGlow;

layout(binding = 10) uniform sampler2D u_sTexture;
layout(binding = 11) uniform sampler2D u_sEmissiveTexture;
layout(binding = 12) uniform sampler2D u_sBlueNoise;

float DitherNoise()
{
#define NOISESIZE 128.0
#if 0 // viewpos
	vec4 modelVS = u_mModelView * vec4(0,0,0,1);
	vec4 deltaPos = v.vViewPosition - modelVS;
	vec2 noiseUV =  deltaPos.xy; 
#elif 1  // screenpx
	vec2 noiseUV = floor(gl_FragCoord.xy) / NOISESIZE;
#else // screenpx + model delta
	vec4 modelOriginVS = u_mFramebuffer * u_mClip * u_mMVP * vec4(0,0,0,1);
	vec3 origin = modelOriginVS.xyz / modelOriginVS.w;
	vec2 originPX = origin.xy * u_vResolution.xy;
	vec2 noiseUV = floor(gl_FragCoord.xy - originPX) / NOISESIZE ;
#endif
	return texture(u_sBlueNoise, noiseUV).r;
}

void main() 
{
	vec4 color = v.vPixelColor * texture( u_sTexture, v.vPixelUV );

	if(color.a < DitherNoise())
		discard;
		
	outDeferredNormal = PackNormal(v.vViewNormal);
	outDeferredAlbedoSpec.rgb = color.rgb;
	outDeferredAlbedoSpec.a = PackSpecularPower(10);
	outDeferredEmissiveGlow =  u_vEmissiveColor * texture( u_sEmissiveTexture, v.vPixelUV );
}