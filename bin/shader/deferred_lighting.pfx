layout (location = 0) out vec4 outColor;

layout(binding = 12)uniform sampler2D u_sDeferredNormal;
layout(binding = 13)uniform sampler2D u_sDeferredAlbedoSpec;
layout(binding = 14)uniform sampler2D u_sSSAO;
layout(binding = 15)uniform sampler2D u_sShadowMap0;
layout(binding = 16)uniform sampler2D u_sShadowMap1;
layout(binding = 17)uniform sampler2D u_sShadowMap2;
layout(binding = 18)uniform sampler2D u_sDeferredEmissiveGlow;
layout(binding = 19) uniform sampler2D u_sDepth;

// shadow
const float u_fShadowBlendSize = 0.5;
const float u_fShadowBlurFactor[3] = float[]( 0.6, 0.45, 0.6 );
const float u_fGauss[9] = float[](
	2,	4,	2,
	4,	8,	4,
	2,	4,	2
);

//-----------------------------------------------------------
// SSAO
//-----------------------------------------------------------

vec3 SSAO()
{
	//return texture2D( u_sSSAO, v.vPixelUV ).rgb;
	
	vec3 result = vec3(0);
	vec2 pixelOffset = vec2(1.0/u_vResolution.x, 1.0/u_vResolution.y);
	float sumFactors = 0.0;
	for (int x = -1, gx = 0; x <= 1; ++x, ++gx) 
    {
        for (int y = -1, gy = 0; y <= 1; ++y, ++gy) 
        {
            vec2 offset = vec2(x,y) * pixelOffset;
			vec2 uv = v.vPixelUV + offset;
			float factor = u_fGauss[gy*3+gx];
			result += factor * texture( u_sSSAO, uv ).rgb;
			sumFactors += factor;
        }
    }
	return result / sumFactors;
}

//-----------------------------------------------------------
// SHADOWS
//-----------------------------------------------------------
float LookUpShadow(sampler2D _sampler,vec4 _shadowCoord)
{
	if( texture( _sampler, _shadowCoord.xy).r <  _shadowCoord.z - 0.001)
		return 0.0;
		
	return 1.0;
}

//-----------------------------------------------------------

float ComputeShadow(sampler2D _sampler, int _index, vec4 _viewPos)
{
	float shadow = 0.0;
	vec4 vShadowCoord = u_mFramebuffer * u_mClip * u_maViewToShadow[_index] * _viewPos;
	vec2 texelSize=u_fShadowBlurFactor[_index]*vec2(1.0/2048.0,1.0/2048.0);
	
//#define RAW
#define PCF_16
//#define PCF_16_NODITHER
//#define PCF_4

#ifdef PCF_16
	float x,y;
	vec2 o = mod(floor(gl_FragCoord.xy), 2.0);
	for (y = -3.5 ; y <=3.5 ; y+=1.0)
		for (x = -3.5 ; x <=3.5 ; x+=1.0)
			shadow += LookUpShadow(_sampler,vShadowCoord+vec4(texelSize*(o+vec2(x,y)),0,0));
	shadow *= 1.0/64.0;
#endif
	
#ifdef PCF_16_NODITHER
	float x,y;
	for (y = -3.5 ; y <=3.5 ; y+=1.0)
		for (x = -3.5 ; x <=3.5 ; x+=1.0)
			shadow += LookUpShadow(_sampler,vShadowCoord+vec4(texelSize*(vec2(x,y)),0,0));
	shadow *= 1.0/64.0;
#endif
	
#ifdef PCF_4
	vec2 o = mod(floor(gl_FragCoord.xy), 2.0);
	shadow += LookUpShadow(_sampler,vShadowCoord+vec4(texelSize*(vec2(-1.5, 0.5) + o),0,0));
	shadow += LookUpShadow(_sampler,vShadowCoord+vec4(texelSize*(vec2( 0.5, 0.5) + o),0,0));
	shadow += LookUpShadow(_sampler,vShadowCoord+vec4(texelSize*(vec2(-1.5, -1.5) + o),0,0));
	shadow += LookUpShadow(_sampler,vShadowCoord+vec4(texelSize*(vec2( 0.5, -1.5) + o),0,0));
	shadow *= 0.25;
#endif

#ifdef RAW
	shadow += LookUpShadow(_sampler,vShadowCoord);
#endif
	
    return shadow;
}

//-----------------------------------------------------------

float Shadow(vec4 _viewPos, float _distance)
{
	// shadow map index
	if( _distance > u_faShadowMapDistances[2] )
	{
		return 0;
	}
	else if(_distance > u_faShadowMapDistances[2] - 2.0*u_fShadowBlendSize)
	{
		float shadow2 = ComputeShadow(u_sShadowMap2,2,_viewPos);
		float shadow3 = 0;
		float dist1 = u_faShadowMapDistances[2] - 2.0*u_fShadowBlendSize;
		return mix(shadow2,shadow3,(_distance-dist1)/(2.0*u_fShadowBlendSize));
	}
	else if( _distance > u_faShadowMapDistances[1] + u_fShadowBlendSize )
	{
		return ComputeShadow(u_sShadowMap2,2,_viewPos);
	}
	else if(_distance > u_faShadowMapDistances[1] - u_fShadowBlendSize)
	{
		float shadow1 = ComputeShadow(u_sShadowMap1,1,_viewPos);
		float shadow2 = ComputeShadow(u_sShadowMap2,2,_viewPos);
		float dist1 = u_faShadowMapDistances[1] - u_fShadowBlendSize;
		return mix(shadow1,shadow2,(_distance-dist1)/(2*u_fShadowBlendSize));
	}
	else if( _distance > u_faShadowMapDistances[0] + u_fShadowBlendSize)
	{
		return ComputeShadow(u_sShadowMap1,1,_viewPos);
	}
	else if(_distance > u_faShadowMapDistances[0] - u_fShadowBlendSize)
	{
		float shadow0 = ComputeShadow(u_sShadowMap0,0,_viewPos);
		float shadow1 = ComputeShadow(u_sShadowMap1,1,_viewPos);
		float dist0 = u_faShadowMapDistances[0] - u_fShadowBlendSize;
		return mix(shadow0,shadow1,(_distance-dist0)/(2*u_fShadowBlendSize));
	}
	
	return ComputeShadow(u_sShadowMap0,0,_viewPos);
}

//-----------------------------------------------------------
// LIGHTING
//-----------------------------------------------------------

void main() 
{
	vec4 P = GetViewPos(u_sDepth, v.vPixelUV);
	float ssao = SSAO().r;
	float shadow = Shadow(P,-P.z);
	
	// ambient
	vec3 ambient = ssao * u_vGlobalAmbient.rgb;
	vec3 emissive = texture( u_sDeferredEmissiveGlow, v.vPixelUV ).rgb;
		
	// diffuse
	vec4 N = UnpackNormal(texture( u_sDeferredNormal, v.vPixelUV).xy);
	vec4 L =  -u_vViewSunDir;
	float diffuseFactor = max(0, dot(N,L)); 
	
	// specular
	vec4 albedoSpec = texture(u_sDeferredAlbedoSpec,v.vPixelUV);
	float specularPower = UnpackSpecularPower(albedoSpec.w);
	vec4 V = normalize( vec4(0,0,0,1) - P );
	vec4 R = normalize( reflect( -L, N ) );
    float RdotV = max( dot( R, V ), 0 );
	float specularFactor =  pow(RdotV, specularPower);
		
	vec3 finalColor = ambient * albedoSpec.rgb;	
	finalColor += emissive;
	finalColor += (diffuseFactor + specularFactor ) * shadow * u_vSunColor.rgb * albedoSpec.rgb;
	outColor = vec4(finalColor,1);
	/*
	// material
	ambientMat = ambientcolor * ambientTexture * GlobalAmbient;
	emissiveMat = emissiveColor * emissiveTexture
	diffuseMat = diffuseColor * diffuseTexture
	specularMat = specularColor * specularTexture
	specularPower = specularPowerTexture * specularScale
	alphaMat = diffuseAlpha ou opacityTexture
	
	// lighting
	diffuseLight = 0
	specularLight = 0
	for(each light)
	{
		eyePos = vec4(0,0,0,1)
		P = posInView
		N = normal
		L = -lightDirection
		V = eyePos - P
		diffuseLight += max(0,N.L) * lightColor * intensity		
		R = reflect(-L,N)
		specularLight += (max(0,R.V)^ specularPower) * lightColor * intensity
	}
	
	ambient = ambientMat
	emissive = emissiveMat
	diffuse = diffuseMat * diffuseLight
	specular =  specularMat * specularLight
	outColor = (ambient + emissive + difusse + specular)
	alpha = alpha
	*/
	
	// DEBUG BAD NORMAL
	//if(length(normal)<0.1)
	// outColor = vec3(1,0,0);
	// outColor = SSAO();
	//outColor = texture2D( u_sSSAO, v.vPixelUV ).rgb;
	//outColor = albedo;
	//outColor = normal;
	//outColor = vec3(texture( u_sDeferredNormal, v.vPixelUV).xyz );
	//outColor = viewPos;
	//outColor = vec3(positionZ.w);
	
}