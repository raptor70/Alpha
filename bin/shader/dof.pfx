layout (location = 0) out vec4 outFirst;
layout (location = 1) out vec4 outSecond;

layout (binding = 10) uniform sampler2D u_sTexture;
layout (binding = 11) uniform sampler2D u_sMainFrame;
layout (binding = 12) uniform sampler2D u_sDeferredAlbedoSpec;
layout (binding = 13) uniform sampler2D u_sDepth;

vec2 halfUVDelta = vec2(1.0/(u_vResolution.x*0.5),1.0/(u_vResolution.y*0.5));
vec2 UVDelta = vec2(1.0/(u_vResolution.x),1.0/(u_vResolution.y));

// COC
const float filmWidth = 0.055;
const float FOV = 40*3.14/180;
float focallength = 0.5*filmWidth/tan(FOV/2);
const float fnumber = 5.6;
float aperture = focallength/fnumber;
const float fixedfocusPlane = 2;
const bool 	autofocus = true;

const vec2 upDir = vec2(0,-1);
const vec2 bottomleftDir = normalize(vec2(0.866,0.5));
const vec2 bottomrightDir = normalize(vec2(-0.866,0.5));

const float numSample = 5;
const float distSample = 5;
float sampleStep = distSample / numSample;

//-------------------------------------------------

float ComputeFakeCOC(float _objDistance, float _focusPlane)
{
	float coc = 0;
	if(_objDistance>_focusPlane)
	{
		float farPlane = min(u_fDOFMaxFarPlane,_focusPlane + u_fDOFFarPlaneFromFocus);
		coc = (_objDistance-_focusPlane)/(farPlane-_focusPlane);
	}
	else
	{
		float nearPlane = max(u_fDOFMinNearPlane,_focusPlane + u_fDOFNearPlaneFromFocus);
		coc = (_focusPlane-_objDistance)/(_focusPlane-nearPlane);
	}
	
	return clamp(coc,0,1);
}

//-------------------------------------------------

float ComputeCOC(float _objDistance, float _focusPlane)
{
	float coc = aperture*(focallength*(_objDistance-_focusPlane))/(_objDistance*(_focusPlane-focallength));
	coc = abs(coc/filmWidth);
	return clamp(coc * u_vResolution.x / distSample,0,1);
}

//-------------------------------------------------

void main() 
{
	vec3 pos = GetViewPos(u_sDepth, v.vPixelUV).xyz;
	vec4 albedoSpec = texture(u_sDeferredAlbedoSpec,v.vPixelUV);
	vec4 mainFrame = texture( u_sMainFrame, v.vPixelUV );
	vec4 textureVal = texture( u_sTexture, v.vPixelUV );
	
	//float 
#if COC
	float focusPlane = fixedfocusPlane;
	if(autofocus)
		focusPlane = -GetViewPos(u_sDepth, vec2(0.5)).z;
	float coc = 1;
	float objectDistance = -pos.z;
	if(objectDistance == 0 )
	{
		coc = 0;
	}
	else
	{
		//coc = ComputeCOC(objectDistance,focusPlane);
		coc = ComputeFakeCOC(objectDistance,focusPlane);
	}
	outFirst = vec4(mainFrame.rgb,coc);
#elif FIRST
	// top
	vec4 color = mainFrame;
	float coc = color.a;
	for(int i=1;i<numSample; i++)
	{
		color += texture( u_sMainFrame, v.vPixelUV + i * sampleStep * coc * upDir * halfUVDelta);
	}
	color /= numSample;
	outFirst = vec4(color.rgb,mainFrame.a);
	
	// bottomleft
	color = mainFrame;
	for(int i=1;i<numSample; i++)
	{
		color +=texture( u_sMainFrame, v.vPixelUV + i * sampleStep * coc * bottomleftDir * halfUVDelta);
	}
	color /= numSample;
	outSecond = vec4(color.rgb,coc);
#else
	// first = texture
	// second = albedo
	// original = mainframe
	
	// bottomleft
	vec4 color1 = textureVal;
	float coc = color1.a;
	int w = 1;
	for(int i=1;i<numSample; i++)
	{
		color1 +=texture( u_sTexture, v.vPixelUV + i * sampleStep * coc * bottomleftDir * halfUVDelta);
	}
	color1 /= numSample;
	
	// bottomright
	vec4 color2 = albedoSpec;
	vec4 color3 = textureVal;
	for(int i=1;i<numSample; i++)
	{
		color2 +=texture( u_sDeferredAlbedoSpec, v.vPixelUV + i* sampleStep * coc * bottomrightDir * halfUVDelta);
		color3 +=texture( u_sTexture, v.vPixelUV + i * sampleStep * coc * bottomrightDir * halfUVDelta);
	}
	color2 /= numSample;
	color3 /= numSample;
	vec4 color = (color1+color2+color3)/3;
	vec4 original = mainFrame;
	outFirst = mix(original,color,color.a);
	//outFirst = color;
	
	//outFirst = albedoSpec;
	//outFirst = color1;
	//outFirst = texture;
	//outFirst = color2;
	//outFirst = color3;
	//outFirst = original;
	//outFirst = texture.aaaa;
#endif
}