layout (location = 0) out vec4 outColor;

layout(binding = 12)uniform sampler2D u_sDeferredNormal;
layout(binding = 13)uniform sampler2D u_sDeferredAlbedoSpec;
layout(binding = 14) uniform sampler2D u_sDepth;

void main() 
{
	// geometry
	vec2 screenUV = gl_FragCoord.xy / u_vResolution;
	vec4 P = GetViewPos(u_sDepth, screenUV);
	
	// omni info
	vec4 omniPos = u_mModelView * vec4(0,0,0,1);
	omniPos = vec4(omniPos.xyz/ omniPos.w, 1);
	float omniRadius = length(u_mModelView * vec4(1,0,0,1) - omniPos);
	vec4 L = omniPos - P;
	float dist = length(L);
	if(dist>omniRadius)
	{
		//outColor = vec4(1,0,0,0.1); return;
		discard;
	}	
	float omniIntensity = 1.0; // todo
	vec3 omnicolor = v.vPixelColor.rgb;

	// diffuse
	vec4 N = UnpackNormal(texture( u_sDeferredNormal, screenUV).xy);
	L /= dist; 
	float diffuseFactor = max(0, dot(N,L));
	
	// specular
	vec4 albedoSpec = texture(u_sDeferredAlbedoSpec,screenUV);
	float specularPower = UnpackSpecularPower(albedoSpec.w);
	vec4 V = normalize( vec4(0,0,0,1) - P );
	vec4 R = normalize( reflect( -L, N ) );
    float RdotV = max( dot( R, V ), 0 );
	float specularFactor =  pow(RdotV, specularPower);
	
	// 
	float attenuation = 1.0f - smoothstep( omniRadius * 0.75f, omniRadius, dist );
	outColor = vec4((diffuseFactor + specularFactor ) * attenuation * omnicolor * omniIntensity * albedoSpec.rgb,1);
}