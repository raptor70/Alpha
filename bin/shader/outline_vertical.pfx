layout (location = 0) out vec4 outColor;

layout(binding = 10) uniform sampler2D u_sTexture;
layout(binding = 12) uniform sampler2D u_sOutlinePos;
layout(binding = 13) uniform sampler2D u_sDepth;

vec2 UVDelta = vec2(1.0/u_vResolution.x,1.0/u_vResolution.y);

int FloatToDistX(float _value)
{
	return int(_value * 255.0) - u_iOutlineSize;
}

float ComputeAlpha(float _dist2)
{
	float dist = sqrt(_dist2);
	float alpha = clamp((1.0 - dist / float(u_iOutlineSize)),0,1);
	alpha *= alpha;
	return alpha;
}

bool IsVoid(int _distX)
{
	return (_distX == 255-u_iOutlineSize);
}

void main() 
{
	// first sample
	vec4 currentColor = texture(u_sTexture,v.vPixelUV).rgba;
	int nearestDistX = 255;
	int nearestDistY = 255;
	float nearestDist2 = 255*255;
	vec3 nearestColor = vec3(0);
	int distX = FloatToDistX(currentColor.a);
	if(!IsVoid(distX))
	{
		nearestDistX = distX;
		nearestDistY = 0;
		nearestDist2 = float(distX*distX);
		nearestColor = currentColor.rgb;
	}
	
	outColor = vec4(1,0,0,0);
	
	// find nearest zone
	for(int i=1; i<= u_iOutlineSize; i++)
	{
		// check neg one
		currentColor = texture(u_sTexture,v.vPixelUV-vec2(0,i*UVDelta.y)).rgba;
		distX = FloatToDistX(currentColor.a);
		if(!IsVoid(distX))
		{
			float dist2 = float(distX*distX+i*i);
			if(dist2<nearestDist2)
			{
				nearestDistX = distX;
				nearestDistY = i;
				nearestDist2 = dist2;
				nearestColor = currentColor.rgb;
			}
		}
		
		// check pos one
		currentColor = texture(u_sTexture,v.vPixelUV+vec2(0,i*UVDelta.y)).rgba;
		distX = FloatToDistX(currentColor.a);
		if(!IsVoid(distX))
		{
			float dist2 = float(distX*distX+i*i);
			if(dist2<nearestDist2)
			{
				nearestDistX = distX;
				nearestDistY = -i;
				nearestDist2 = dist2;
				nearestColor = currentColor.rgb;
			}
		}
	}
		
	// no outline found
	if(nearestDistX==255)
	{
		outColor = vec4(0);
		return;
	}
	
	// compute depth
	float curZ = GetViewPos(u_sDepth, v.vPixelUV ).z;
	float nearestZ = texture( u_sOutlinePos, v.vPixelUV - vec2(nearestDistX*UVDelta.x,nearestDistY*UVDelta.y)).x;
	float alpha = ComputeAlpha(nearestDist2);
	if( alpha < 1 )
	{
		outColor = vec4(nearestColor,alpha);
	}
	else if( curZ > nearestZ+0.01)
	{
		outColor = vec4(nearestColor,alpha*0.1);
	}
}