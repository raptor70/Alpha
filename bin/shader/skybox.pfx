layout (location = 0) out vec3 outDeferredNormal;
layout (location = 1) out vec4 outDeferredAlbedoSpec;
layout (location = 2) out vec4 outDeferredEmissiveGlow;

layout(binding = 10) uniform sampler2D u_sTexture;

void main() 
{
	//fragColor = mix(vec4(1,0,0,1),vec4(0,1,0,1),v.vPixelUV.y);
	//fragColor = texture(u_sTexture, v.vPixelUV);
	//fragColor = vec4(texture(u_sTexture, v.vPixelUV).xyz,1);
	//fragColor = vec4(1);
	//fragColor = u_mInvViewProj * vec4(v.vPixelUV.x,v.vPixelUV
	
	vec4 pos = u_mInvViewProj * u_mInvClip * u_mInvFramebuffer * vec4(v.vPixelUV,0,1);
	vec3 nearPos = vec3(pos.xyz/pos.w);
	pos = u_mInvViewProj * u_mInvClip * u_mInvFramebuffer * vec4(v.vPixelUV,1,1);
	vec3 farPos = vec3(pos.xyz/pos.w);
	vec3 dir = normalize(farPos-nearPos);
	float uvY = max(0,dir.y);
	
	// Hnorm
	dir = normalize(vec3(dir.x,0,dir.z));
	float dotX = dot(dir,vec3(1,0,0));
	float dotZ = dot(dir,vec3(0,0,1));
	float angle = acos(dotX);
	if(dotZ>0)
		angle = MATH_2_PI - angle;
	float uvx = angle / MATH_2_PI;
	
	vec3 color = texture(u_sTexture, vec2(uvx,uvY)).xyz;
		
	outDeferredNormal = vec3(0);
	outDeferredAlbedoSpec = vec4(0);
	outDeferredEmissiveGlow = vec4(color,0);
}