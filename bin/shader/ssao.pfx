layout (location = 0) out vec3 outSSAO;

layout(binding = 12) uniform sampler2D u_sDeferredNormal;
layout(binding = 13) uniform sampler2D u_sSSAONoise;
layout(binding = 14) uniform sampler2D u_sDepth;

// HBAO Noise
vec2 SSAONoiseScale = vec2(u_vResolution.x/4.0,u_vResolution.y/4.0);

// HBAO
const int HBAONbSampleDir = 6;
const int HBAONbSamplePerDir = 6;

const bool bDEBUG = false;
bool bDebugDone = false;

//-----------------------------------------------------------
// HELPERS
//-----------------------------------------------------------

float FallOff(float _dist2, float _radius)
{
	return clamp(1.0 - (_dist2) / (_radius*_radius),0,1);
}

//-----------------------------------------------------------
// HBAO
//-----------------------------------------------------------

float ComputeScreenRadius(vec3 _FragPos, out float _viewRadius)
{
	vec4 projCenter = (/*u_mClip ?*/ u_mProj*vec4(_FragPos,1));
	projCenter.xyz /= projCenter.w;
	vec4 projRadiusPoint = (/*u_mClip ?*/u_mProj*vec4((_FragPos+vec3(u_fSSAORadius,0,0)),1));
	projRadiusPoint.xyz /= projRadiusPoint.w;
	float screenRadius = (projRadiusPoint.x-projCenter.x);
	screenRadius = screenRadius * 0.5;
	screenRadius *= u_vResolution.x;
	screenRadius *= 0.75; // magic factor to match radius
	float baseScreenRadius = screenRadius;
	screenRadius = clamp(screenRadius,u_vSSAOScreenRadius.x,u_vSSAOScreenRadius.y);
	_viewRadius = length(screenRadius) * u_fSSAORadius / baseScreenRadius;
	return screenRadius;
}

//-----------------------------------------------------------

float LocalHBAO(vec3 _FragPos, vec3 _FragNormal, vec3 _SamplePos, float _viewRadius, out float weight)
{
	vec3 vFragToSample = _SamplePos - _FragPos;
	float fDist2 = dot(vFragToSample,vFragToSample);
	float fDot = dot(_FragNormal,vFragToSample/sqrt(fDist2));
	weight = FallOff(fDist2,_viewRadius);
	return clamp(fDot-u_fSSAODotBias,0,1) * weight;
}

//-----------------------------------------------------------

bool IsNear(vec2 _uv1, vec2 _uv2)
{
	vec2 delta = abs(_uv2-_uv1);
	return delta.x < 0.001 && delta.y < 0.001;
}

//-----------------------------------------------------------

vec3 HBAO(vec2 _uv, bool _bDebug)
{
	// Get input for HBAO algorithm
    vec3 fragPos = GetViewPos(u_sDepth, _uv).xyz;
	vec3 normal = UnpackNormal(texture( u_sDeferredNormal, v.vPixelUV).xy).xyz;
    vec3 randomVec = texture(u_sSSAONoise, _uv * SSAONoiseScale).xyz;
	//randomVec.x = 0;
	//randomVec.y = 1;
	//randomVec.z = 0;
	
	// Radius
	float viewRadius= u_fSSAORadius;
	float screenRadius = ComputeScreenRadius(fragPos,viewRadius);
		
	// Prepare direction
	float occlusion = 0.0;
	float weights = 0.0;
	int currentSamplePerDir = HBAONbSamplePerDir;
	float sampleStep = screenRadius / float(HBAONbSamplePerDir);	
	vec2 screenDir = normalize(randomVec.xy);
	float angleRotation = 2.0*3.14/HBAONbSampleDir;

    for(int i = 0; i < HBAONbSampleDir; ++i)
    {
		vec2 sampleDir = Rotate(screenDir,i*angleRotation);
		vec2 sampleDirStep = sampleStep * sampleDir;
		vec2 deltaUV = vec2(sampleDirStep.x/u_vResolution.x,sampleDirStep.y/u_vResolution.y);
		vec2 sampleUV = _uv + (randomVec.z) * deltaUV;
		for(int j = 0; j < currentSamplePerDir; ++j)
		{
			sampleUV += deltaUV;
			vec3 samplePos = GetViewPos(u_sDepth, sampleUV).xyz;
			float weight = 0;
			occlusion += LocalHBAO(fragPos,normal,samplePos,viewRadius,weight);
			//if(weight>0.011)
				weights += 1;
			if(_bDebug && IsNear(sampleUV,v.vPixelUV))
			{
				bDebugDone= true;
				vec3 vFragToSample = samplePos - fragPos;
				float fDist2 = dot(vFragToSample,vFragToSample);
				return mix(vec3(1,0,0),vec3(0,1,0),FallOff(fDist2,viewRadius));
			}
		}
	}

	occlusion *= u_fSSAOMultiplier / (weights);
	occlusion = clamp(1.0 - occlusion,0,1);
	
	// Debug 
	if(_bDebug && IsNear(_uv,v.vPixelUV))
	{
		bDebugDone= true;
		return vec3(0,0,0);
	}
	
	if(_bDebug )
	{
		vec3 realPos = GetViewPos(u_sDepth, v.vPixelUV).xyz;
		vec3 centerPos = GetViewPos(u_sDepth, _uv).xyz;
		if( length(realPos-centerPos) < viewRadius )
		{
			bDebugDone= true;
			return vec3(0,0.5,0);
		}
	}
			
	return vec3(occlusion);
}

void main() 
{
    outSSAO = vec3(HBAO(v.vPixelUV,bDEBUG));
	//outSSAO = vec3(1);
	
	if(bDEBUG)
	{
		if( !bDebugDone )
			outSSAO = HBAO(v.vPixelUV,false);
	}	
}